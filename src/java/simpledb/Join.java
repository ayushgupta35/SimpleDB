package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinCondition;
    private OpIterator leftIterator;
    private OpIterator rightIterator;
    private Tuple activeLeftTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinCondition = p;
        this.leftIterator = child1;
        this.rightIterator = child2;
        this.activeLeftTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        return joinCondition;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return leftIterator.getTupleDesc().getFieldName(joinCondition.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return rightIterator.getTupleDesc().getFieldName(joinCondition.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(leftIterator.getTupleDesc(), rightIterator.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        leftIterator.open();
        rightIterator.open();
    }

    public void close() {
        super.close();
        leftIterator.close();
        rightIterator.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        leftIterator.rewind();
        rightIterator.rewind();
        activeLeftTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (activeLeftTuple != null || leftIterator.hasNext()) {
            Tuple leftTuple;
            if (activeLeftTuple != null) {
                leftTuple = activeLeftTuple;
            } else {
                activeLeftTuple = leftIterator.next();
                leftTuple = activeLeftTuple;
            }

            while (rightIterator.hasNext()) {
                Tuple rightTuple = rightIterator.next();
                if (joinCondition.filter(leftTuple, rightTuple)) {

                    TupleDesc mergedDesc = getTupleDesc();
                    Tuple mergedTuple = new Tuple(mergedDesc);
                    int leftSize = leftTuple.getTupleDesc().numFields();
                    int rightSize = rightTuple.getTupleDesc().numFields();

                    for (int i = 0; i < leftSize; i++) {
                        mergedTuple.setField(i, leftTuple.getField(i));
                    }
                    for (int j = 0; j < rightSize; j++) {
                        mergedTuple.setField(leftSize + j, rightTuple.getField(j));
                    }
                    return mergedTuple;
                }
            }
            activeLeftTuple = null;
            rightIterator.rewind();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] { leftIterator, rightIterator };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if (children.length == 2) {
            this.leftIterator = children[0];
            this.rightIterator = children[1];
        }
    }

}
